@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TTA.BlazorApp.Shared
@attribute [Authorize]
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
<label class="h2">Add weather forecast</label>
<EditForm class="d-block" Model="@model" OnValidSubmit="@Submit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <InputDate id="forecastDate" TValue="DateTime" @bind-Value="model.Date"></InputDate>
    <InputNumber id="forecastTemperature" TValue="int" @bind-Value="model.TemperatureC">Temp. (C)</InputNumber>
    <InputText id="forecastSummary" @bind-Value="model.Summary">Summary</InputText>
    <button id="forecastSubmitButton" class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    private List<WeatherForecast> forecasts;
    readonly WeatherForecast model = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Submit()
    {
        var response = await Http.PostAsJsonAsync("WeatherForecast", model);
        if (response.IsSuccessStatusCode)
        {
            forecasts.Add(model);
            base.StateHasChanged();
        }
    }
}
